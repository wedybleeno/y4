import logging
import os
import re
import uuid
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import yt_dlp

# –í–∞—à API —Ç–æ–∫–µ–Ω –¥–ª—è Telegram
TELEGRAM_TOKEN = '7172553910:AAFnuMN1b6eXa0MOkvsu1oQvsGmbIS_K53I'

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
DOWNLOAD_DIR = '/tmp/downloads'
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def sanitize_filename(filename):
    """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
    return re.sub(r'[<>:"/\\|?*]', '_', filename)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ YouTube –∏–ª–∏ SoundCloud, –∏ —è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –µ–≥–æ –≤ MP3 –¥–ª—è —Ç–µ–±—è.\n\n'
        '–ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫:\n'
        '‚Ä¢ https://www.youtube.com/watch?v=dQw4w9WgXcQ\n'
        '‚Ä¢ https://youtu.be/dQw4w9WgXcQ\n'
        '‚Ä¢ https://soundcloud.com/artist/track-name'
    )

async def download_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Å—ã–ª–∫–æ–π
    url_pattern = re.compile(
        r'https?://(www\.)?(youtube|youtu\.be|soundcloud)\.com/\S+|https?://youtu\.be/\S+'
    )
    
    if not url_pattern.match(message_text):
        await update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –∏–ª–∏ SoundCloud.\n\n'
            '–ü—Ä–∏–º–µ—Ä—ã:\n'
            '‚Ä¢ https://www.youtube.com/watch?v=dQw4w9WgXcQ\n'
            '‚Ä¢ https://youtu.be/dQw4w9WgXcQ\n'
            '‚Ä¢ https://soundcloud.com/artist/track-name'
        )
        return
    
    # –°—Å—ã–ª–∫–∞ –≤–∞–ª–∏–¥–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    status_message = await update.message.reply_text('–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ...')
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        unique_id = str(uuid.uuid4())
        temp_file_path = os.path.join(DOWNLOAD_DIR, f"{unique_id}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ yt-dlp
        ydl_opts = {
            'format': 'bestaudio/best',
            'outtmpl': f"{temp_file_path}.%(ext)s",
            'noplaylist': True,
            'quiet': True,
            'no_warnings': True,
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º cookies –∏–∑ Chrome —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ "Sign in to confirm you're not a bot"
            'cookiefile': '/tmp/cookies.txt',
            # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –æ–ø—Ü–∏–π –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            'nocheckcertificate': True,
            'ignoreerrors': False,
            'logtostderr': False,
            'geo_bypass': True,
            'geo_bypass_country': 'US',
            # –ü–æ—Å—Ç–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ mp3
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }],
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await status_message.edit_text('–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ...')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(message_text, download=False)
            
            title = info.get('title', 'Unknown title')
            uploader = info.get('uploader', 'Unknown artist')
            
            await status_message.edit_text(f'–°–∫–∞—á–∏–≤–∞—é: {title}...')
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
            ydl.download([message_text])
        
        # –ü—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É mp3 —Ñ–∞–π–ª—É
        mp3_file_path = f"{temp_file_path}.mp3"
        
        if not os.path.exists(mp3_file_path):
            raise Exception("–§–∞–π–ª MP3 –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ
        nice_filename = sanitize_filename(f"{uploader} - {title}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
        await status_message.edit_text(f'–û—Ç–ø—Ä–∞–≤–ª—è—é: {title}...')
        
        with open(mp3_file_path, 'rb') as audio_file:
            await update.message.reply_audio(
                audio=InputFile(audio_file, filename=f"{nice_filename}.mp3"),
                title=title,
                performer=uploader,
                caption=f"üéµ {title}\nüë§ {uploader}"
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(mp3_file_path):
            os.remove(mp3_file_path)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await status_message.edit_text('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')
        
    except Exception as e:
        logger.error(f"Error downloading audio: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ YouTube, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
        if "Sign in to confirm you're not a bot" in str(e):
            await status_message.edit_text(
                "‚ö†Ô∏è YouTube —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —á—Ç–æ –≤—ã –Ω–µ –±–æ—Ç.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        else:
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {str(e)[:100]}...")

def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    application.add_handler(CommandHandler('start', start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, download_audio))
    
    application.run_polling()

if __name__ == '__main__':
    main()
